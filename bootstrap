#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function
import os
import sys
import subprocess
from argparse import ArgumentParser
from os import path as osp


DEFAULT_PY_VERSION = '3'
INDEX_URL = None
EXTRA_INDEX_URL = None
PIP_VERSION = '>=9.0.1'
SETUPTOOLS_VERSION = '>=36.0.1'
VENV_TITLE = 'damnode'
VENV_BASENAME = 'venv'


class VenvCreator(object):
    def prepare(self, py_version):
        if py_version == DEFAULT_PY_VERSION:
            venv_dir = VENV_BASENAME
            prompt = '({}) '.format(VENV_TITLE)
        else:
            venv_dir = '{}-py{}'.format(VENV_BASENAME, py_version)
            prompt = '({}-py{}) '.format(VENV_TITLE, py_version)

        return prompt, venv_dir

    def create(self):
        raise NotImplementedError


class Py2VenvCreator(VenvCreator):
    def create(self):
        prompt, venv_dir = self.prepare('2')
        run(['virtualenv', '--prompt', prompt, venv_dir])
        return venv_dir


class Py3VenvCreator(VenvCreator):
    def create(self):
        prompt, venv_dir = self.prepare('3')
        # TODO: set prompt if python>=3.6
        run(['python3', '-m', 'venv', venv_dir])
        return venv_dir


def main():
    parser = ArgumentParser()
    venv_creator_dict = {
        '2': Py2VenvCreator(),
        '3': Py3VenvCreator()
    }
    parser.add_argument('-p', '--python',
                        choices=sorted(venv_creator_dict.keys()),
                        default=DEFAULT_PY_VERSION,
                        help='Python version of the virtual env to create (default: {})'.format(
                            DEFAULT_PY_VERSION))
    parser.add_argument('-U', '--upgrade',
                        action='store_true',
                        help='Upgrade packages')
    args = parser.parse_args()

    base_dir = osp.dirname(osp.abspath(__file__))
    os.chdir(base_dir)

    base_prefix = getattr(sys, 'real_prefix', None) or getattr(sys, 'base_prefix', sys.prefix)

    if base_prefix == sys.prefix:
        info('Not inside virtual env')
        new_venv_dir = venv_creator_dict[args.python].create()
        pip = osp.join(new_venv_dir, 'bin', 'pip')
    else:
        info('Inside virtual env {!r}'.format(sys.prefix))
        new_venv_dir = None
        pip = 'pip'

    pip_install = [pip, 'install']

    if args.upgrade:
        pip_install.append('-U')

    if INDEX_URL:
        pip_install += ['-i', INDEX_URL]

    if EXTRA_INDEX_URL:
        pip_install += ['--extra-index-url', EXTRA_INDEX_URL]

    run(pip_install + ['pip{}'.format(PIP_VERSION)])
    run(pip_install + ['setuptools{}'.format(SETUPTOOLS_VERSION)])
    run(pip_install + ['-e', '.'])

    if new_venv_dir:
        info("Run 'source {}' to activate virtual env".format(
            osp.join(new_venv_dir, 'bin', 'activate')))


def run(cmd):
    cmdline = subprocess.list2cmdline(cmd)
    info(cmdline)
    subprocess.check_call(cmd)


def info(msg):
    print(msg)
    sys.stdout.flush()


if __name__ == '__main__':
    main()
